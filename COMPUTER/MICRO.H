
/*
 * This file was generated by the SOM Compiler.
 * FileName: micro.h.
 * Generated using:
 *     SOM Precompiler spc: 1.22
 *     SOM Emitter emith: 1.11
 */

#ifndef micro_h
#define micro_h


#include <som.h>

/*
 * Define the class name as an object type
 */
#ifndef Microcomputer
#define Microcomputer SOMAny
#endif
#include <somobj.h>

#define Microcomputer_MajorVersion 0
#define Microcomputer_MinorVersion 0

/*
 * External name shortening if required
 */
#ifdef SOM_USE_SHORT_EXTERNAL_NAMES
#define MicrocomputerNewClass microc
#pragma linkage(microc, system)
#define MicrocomputerClassData microd
#define MicrocomputerCClassData microx
#endif /* SOM_USE_SHORT_EXTERNAL_NAMES */
/*--------------Migration------------*/
#define Microcomputer_classObj MicrocomputerClassData.classObject
#define _Microcomputer Microcomputer_classObj

/*
 * New and Renew macros for Microcomputer
 */
#define _MicrocomputerNew() (_somNew(MicrocomputerClassData.classObject))
#define MicrocomputerNew() \
	( MicrocomputerClassData.classObject \
		? _MicrocomputerNew() \
		: ( MicrocomputerNewClass(Microcomputer_MajorVersion, Microcomputer_MinorVersion), _MicrocomputerNew() ) )
#define MicrocomputerRenew(buf) \
	( _somRenew(MicrocomputerClassData.classObject, buf) )

/*
 * Override method: somInit
 */
#define Microcomputer_somInit(somSelf) \
	SOMObject_somInit(somSelf)

/*
 * Override method: somUninit
 */
#define Microcomputer_somUninit(somSelf) \
	SOMObject_somUninit(somSelf)

/*
 * New Method: Add
 */
typedef void    SOMLINK somTP_Microcomputer_Add(Microcomputer *somSelf);
#pragma linkage(somTP_Microcomputer_Add, system)
typedef somTP_Microcomputer_Add *somTD_Microcomputer_Add;
#define somMD_Microcomputer_Add "----"
#define Microcomputer_Add(somSelf) \
    (SOM_Resolve(somSelf, Microcomputer, Add) \
	(somSelf))
#define _Add Microcomputer_Add

/*
 * New Method: Sub
 */
typedef void    SOMLINK somTP_Microcomputer_Sub(Microcomputer *somSelf);
#pragma linkage(somTP_Microcomputer_Sub, system)
typedef somTP_Microcomputer_Sub *somTD_Microcomputer_Sub;
#define somMD_Microcomputer_Sub "----"
#define Microcomputer_Sub(somSelf) \
    (SOM_Resolve(somSelf, Microcomputer, Sub) \
	(somSelf))
#define _Sub Microcomputer_Sub

/*
 * New Method: Mul
 */
typedef void    SOMLINK somTP_Microcomputer_Mul(Microcomputer *somSelf);
#pragma linkage(somTP_Microcomputer_Mul, system)
typedef somTP_Microcomputer_Mul *somTD_Microcomputer_Mul;
#define somMD_Microcomputer_Mul "----"
#define Microcomputer_Mul(somSelf) \
    (SOM_Resolve(somSelf, Microcomputer, Mul) \
	(somSelf))
#define _Mul Microcomputer_Mul

/*
 * New Method: Div
 */
typedef void    SOMLINK somTP_Microcomputer_Div(Microcomputer *somSelf);
#pragma linkage(somTP_Microcomputer_Div, system)
typedef somTP_Microcomputer_Div *somTD_Microcomputer_Div;
#define somMD_Microcomputer_Div "----"
#define Microcomputer_Div(somSelf) \
    (SOM_Resolve(somSelf, Microcomputer, Div) \
	(somSelf))
#define _Div Microcomputer_Div

/*
 * New Method: Pop
 */
typedef double    SOMLINK somTP_Microcomputer_Pop(Microcomputer *somSelf);
#pragma linkage(somTP_Microcomputer_Pop, system)
typedef somTP_Microcomputer_Pop *somTD_Microcomputer_Pop;
#define somMD_Microcomputer_Pop "----"
#define Microcomputer_Pop(somSelf) \
    (SOM_Resolve(somSelf, Microcomputer, Pop) \
	(somSelf))
#define _Pop Microcomputer_Pop

/*
 * New Method: Push
 */
typedef void    SOMLINK somTP_Microcomputer_Push(Microcomputer *somSelf,
		double Item);
#pragma linkage(somTP_Microcomputer_Push, system)
typedef somTP_Microcomputer_Push *somTD_Microcomputer_Push;
#define somMD_Microcomputer_Push "----"
#define Microcomputer_Push(somSelf,Item) \
    (SOM_Resolve(somSelf, Microcomputer, Push) \
	(somSelf,Item))
#define _Push Microcomputer_Push

/*
 * New Method: Store
 */
typedef void    SOMLINK somTP_Microcomputer_Store(Microcomputer *somSelf,
		int Reg);
#pragma linkage(somTP_Microcomputer_Store, system)
typedef somTP_Microcomputer_Store *somTD_Microcomputer_Store;
#define somMD_Microcomputer_Store "----"
#define Microcomputer_Store(somSelf,Reg) \
    (SOM_Resolve(somSelf, Microcomputer, Store) \
	(somSelf,Reg))
#define _Store Microcomputer_Store

/*
 * New Method: Fetch
 */
typedef void    SOMLINK somTP_Microcomputer_Fetch(Microcomputer *somSelf,
		int Reg);
#pragma linkage(somTP_Microcomputer_Fetch, system)
typedef somTP_Microcomputer_Fetch *somTD_Microcomputer_Fetch;
#define somMD_Microcomputer_Fetch "----"
#define Microcomputer_Fetch(somSelf,Reg) \
    (SOM_Resolve(somSelf, Microcomputer, Fetch) \
	(somSelf,Reg))
#define _Fetch Microcomputer_Fetch

/*
 * New Method: Input
 */
typedef void    SOMLINK somTP_Microcomputer_Input(Microcomputer *somSelf);
#pragma linkage(somTP_Microcomputer_Input, system)
typedef somTP_Microcomputer_Input *somTD_Microcomputer_Input;
#define somMD_Microcomputer_Input "----"
#define Microcomputer_Input(somSelf) \
    (SOM_Resolve(somSelf, Microcomputer, Input) \
	(somSelf))
#define _Input Microcomputer_Input

/*
 * New Method: Output
 */
typedef void    SOMLINK somTP_Microcomputer_Output(Microcomputer *somSelf);
#pragma linkage(somTP_Microcomputer_Output, system)
typedef somTP_Microcomputer_Output *somTD_Microcomputer_Output;
#define somMD_Microcomputer_Output "----"
#define Microcomputer_Output(somSelf) \
    (SOM_Resolve(somSelf, Microcomputer, Output) \
	(somSelf))
#define _Output Microcomputer_Output

/*
 * Declare the class creation procedure
 */
SOMEXTERN SOMAny * SOMLINK MicrocomputerNewClass(integer4 scemajorVersion,
		integer4 sceminorVersion);
#pragma linkage(MicrocomputerNewClass, system)

/*
 * Declare the class data structure
 */
SOMEXTERN struct MicrocomputerClassDataStructure {
	SOMAny *classObject;
	somMToken Add;
	somMToken Sub;
	somMToken Mul;
	somMToken Div;
	somMToken Pop;
	somMToken Push;
	somMToken Store;
	somMToken Fetch;
	somMToken Input;
	somMToken Output;
} MicrocomputerClassData;

/*
 * Declare the C specific class data structure
 */
SOMEXTERN struct MicrocomputerCClassDataStructure {
	somMethodTab *parentMtab;
	somDToken instanceDataToken;
} MicrocomputerCClassData;

#endif       /* micro_h */
